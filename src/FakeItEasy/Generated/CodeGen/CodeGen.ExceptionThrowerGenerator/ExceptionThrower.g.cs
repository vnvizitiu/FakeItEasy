//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CodeGen.ExceptionThrowerGenerator.
//
//     Changes to this file will be lost when the project is rebuilt.
// </auto-generated>
//------------------------------------------------------------------------------
namespace FakeItEasy.Configuration
{
    using System;
    using System.Reflection;
    using FakeItEasy.Core;

    public partial interface IExceptionThrowerConfiguration<out TInterface>
    {
        /// <summary>
        /// Throws the specified exception when the currently configured
        /// call gets called.
        /// </summary>
        /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
        /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
        /// <returns>Configuration object.</returns>
        /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        IAfterCallConfiguredConfiguration<TInterface> Throws<T1>(Func<T1, Exception> exceptionFactory);

        /// <summary>
        /// Throws the specified exception when the currently configured
        /// call gets called.
        /// </summary>
        /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
        /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
        /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
        /// <returns>Configuration object.</returns>
        /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        IAfterCallConfiguredConfiguration<TInterface> Throws<T1, T2>(Func<T1, T2, Exception> exceptionFactory);

        /// <summary>
        /// Throws the specified exception when the currently configured
        /// call gets called.
        /// </summary>
        /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
        /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
        /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
        /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
        /// <returns>Configuration object.</returns>
        /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        IAfterCallConfiguredConfiguration<TInterface> Throws<T1, T2, T3>(Func<T1, T2, T3, Exception> exceptionFactory);

        /// <summary>
        /// Throws the specified exception when the currently configured
        /// call gets called.
        /// </summary>
        /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
        /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
        /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
        /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
        /// <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
        /// <returns>Configuration object.</returns>
        /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        IAfterCallConfiguredConfiguration<TInterface> Throws<T1, T2, T3, T4>(Func<T1, T2, T3, T4, Exception> exceptionFactory);

        /// <summary>
        /// Throws the specified exception when the currently configured
        /// call gets called.
        /// </summary>
        /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
        /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
        /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
        /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
        /// <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
        /// <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
        /// <returns>Configuration object.</returns>
        /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        IAfterCallConfiguredConfiguration<TInterface> Throws<T1, T2, T3, T4, T5>(Func<T1, T2, T3, T4, T5, Exception> exceptionFactory);

        /// <summary>
        /// Throws the specified exception when the currently configured
        /// call gets called.
        /// </summary>
        /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
        /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
        /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
        /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
        /// <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
        /// <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
        /// <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
        /// <returns>Configuration object.</returns>
        /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        IAfterCallConfiguredConfiguration<TInterface> Throws<T1, T2, T3, T4, T5, T6>(Func<T1, T2, T3, T4, T5, T6, Exception> exceptionFactory);

        /// <summary>
        /// Throws the specified exception when the currently configured
        /// call gets called.
        /// </summary>
        /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
        /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
        /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
        /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
        /// <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
        /// <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
        /// <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
        /// <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
        /// <returns>Configuration object.</returns>
        /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        IAfterCallConfiguredConfiguration<TInterface> Throws<T1, T2, T3, T4, T5, T6, T7>(Func<T1, T2, T3, T4, T5, T6, T7, Exception> exceptionFactory);

        /// <summary>
        /// Throws the specified exception when the currently configured
        /// call gets called.
        /// </summary>
        /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
        /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
        /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
        /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
        /// <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
        /// <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
        /// <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
        /// <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
        /// <typeparam name="T8">The type of the eighth argument of the faked method call.</typeparam>
        /// <returns>Configuration object.</returns>
        /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        IAfterCallConfiguredConfiguration<TInterface> Throws<T1, T2, T3, T4, T5, T6, T7, T8>(Func<T1, T2, T3, T4, T5, T6, T7, T8, Exception> exceptionFactory);
    }

    internal partial class RuleBuilder
    {
        /// <summary>
        /// Throws the specified exception when the currently configured
        /// call gets called.
        /// </summary>
        /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
        /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
        /// <returns>Configuration object.</returns>
        /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        public IAfterCallConfiguredConfiguration<IVoidConfiguration> Throws<T1>(Func<T1, Exception> exceptionFactory)
        {
            Guard.AgainstNull(exceptionFactory);

            return this.Throws((IFakeObjectCall call) =>
            {
                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                return exceptionFactory(call.GetArgument<T1>(0)!);
            });
        }

        /// <summary>
        /// Throws the specified exception when the currently configured
        /// call gets called.
        /// </summary>
        /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
        /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
        /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
        /// <returns>Configuration object.</returns>
        /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        public IAfterCallConfiguredConfiguration<IVoidConfiguration> Throws<T1, T2>(Func<T1, T2, Exception> exceptionFactory)
        {
            Guard.AgainstNull(exceptionFactory);

            return this.Throws((IFakeObjectCall call) =>
            {
                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!);
            });
        }

        /// <summary>
        /// Throws the specified exception when the currently configured
        /// call gets called.
        /// </summary>
        /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
        /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
        /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
        /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
        /// <returns>Configuration object.</returns>
        /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        public IAfterCallConfiguredConfiguration<IVoidConfiguration> Throws<T1, T2, T3>(Func<T1, T2, T3, Exception> exceptionFactory)
        {
            Guard.AgainstNull(exceptionFactory);

            return this.Throws((IFakeObjectCall call) =>
            {
                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!);
            });
        }

        /// <summary>
        /// Throws the specified exception when the currently configured
        /// call gets called.
        /// </summary>
        /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
        /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
        /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
        /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
        /// <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
        /// <returns>Configuration object.</returns>
        /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        public IAfterCallConfiguredConfiguration<IVoidConfiguration> Throws<T1, T2, T3, T4>(Func<T1, T2, T3, T4, Exception> exceptionFactory)
        {
            Guard.AgainstNull(exceptionFactory);

            return this.Throws((IFakeObjectCall call) =>
            {
                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!, call.GetArgument<T4>(3)!);
            });
        }

        /// <summary>
        /// Throws the specified exception when the currently configured
        /// call gets called.
        /// </summary>
        /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
        /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
        /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
        /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
        /// <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
        /// <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
        /// <returns>Configuration object.</returns>
        /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        public IAfterCallConfiguredConfiguration<IVoidConfiguration> Throws<T1, T2, T3, T4, T5>(Func<T1, T2, T3, T4, T5, Exception> exceptionFactory)
        {
            Guard.AgainstNull(exceptionFactory);

            return this.Throws((IFakeObjectCall call) =>
            {
                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!, call.GetArgument<T4>(3)!, call.GetArgument<T5>(4)!);
            });
        }

        /// <summary>
        /// Throws the specified exception when the currently configured
        /// call gets called.
        /// </summary>
        /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
        /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
        /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
        /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
        /// <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
        /// <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
        /// <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
        /// <returns>Configuration object.</returns>
        /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        public IAfterCallConfiguredConfiguration<IVoidConfiguration> Throws<T1, T2, T3, T4, T5, T6>(Func<T1, T2, T3, T4, T5, T6, Exception> exceptionFactory)
        {
            Guard.AgainstNull(exceptionFactory);

            return this.Throws((IFakeObjectCall call) =>
            {
                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!, call.GetArgument<T4>(3)!, call.GetArgument<T5>(4)!, call.GetArgument<T6>(5)!);
            });
        }

        /// <summary>
        /// Throws the specified exception when the currently configured
        /// call gets called.
        /// </summary>
        /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
        /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
        /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
        /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
        /// <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
        /// <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
        /// <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
        /// <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
        /// <returns>Configuration object.</returns>
        /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        public IAfterCallConfiguredConfiguration<IVoidConfiguration> Throws<T1, T2, T3, T4, T5, T6, T7>(Func<T1, T2, T3, T4, T5, T6, T7, Exception> exceptionFactory)
        {
            Guard.AgainstNull(exceptionFactory);

            return this.Throws((IFakeObjectCall call) =>
            {
                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!, call.GetArgument<T4>(3)!, call.GetArgument<T5>(4)!, call.GetArgument<T6>(5)!, call.GetArgument<T7>(6)!);
            });
        }

        /// <summary>
        /// Throws the specified exception when the currently configured
        /// call gets called.
        /// </summary>
        /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
        /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
        /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
        /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
        /// <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
        /// <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
        /// <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
        /// <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
        /// <typeparam name="T8">The type of the eighth argument of the faked method call.</typeparam>
        /// <returns>Configuration object.</returns>
        /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        public IAfterCallConfiguredConfiguration<IVoidConfiguration> Throws<T1, T2, T3, T4, T5, T6, T7, T8>(Func<T1, T2, T3, T4, T5, T6, T7, T8, Exception> exceptionFactory)
        {
            Guard.AgainstNull(exceptionFactory);

            return this.Throws((IFakeObjectCall call) =>
            {
                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!, call.GetArgument<T4>(3)!, call.GetArgument<T5>(4)!, call.GetArgument<T6>(5)!, call.GetArgument<T7>(6)!, call.GetArgument<T8>(7)!);
            });
        }

        public partial class ReturnValueConfiguration<TMember>
        {
            /// <summary>
            /// Throws the specified exception when the currently configured
            /// call gets called.
            /// </summary>
            /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            /// <returns>Configuration object.</returns>
            /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
            public IAfterCallConfiguredConfiguration<IReturnValueConfiguration<TMember>> Throws<T1>(Func<T1, Exception> exceptionFactory)
            {
                Guard.AgainstNull(exceptionFactory);

                return this.Throws((IFakeObjectCall call) =>
                {
                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                    return exceptionFactory(call.GetArgument<T1>(0)!);
                });
            }

            /// <summary>
            /// Throws the specified exception when the currently configured
            /// call gets called.
            /// </summary>
            /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            /// <returns>Configuration object.</returns>
            /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
            public IAfterCallConfiguredConfiguration<IReturnValueConfiguration<TMember>> Throws<T1, T2>(Func<T1, T2, Exception> exceptionFactory)
            {
                Guard.AgainstNull(exceptionFactory);

                return this.Throws((IFakeObjectCall call) =>
                {
                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                    return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!);
                });
            }

            /// <summary>
            /// Throws the specified exception when the currently configured
            /// call gets called.
            /// </summary>
            /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            /// <returns>Configuration object.</returns>
            /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
            public IAfterCallConfiguredConfiguration<IReturnValueConfiguration<TMember>> Throws<T1, T2, T3>(Func<T1, T2, T3, Exception> exceptionFactory)
            {
                Guard.AgainstNull(exceptionFactory);

                return this.Throws((IFakeObjectCall call) =>
                {
                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                    return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!);
                });
            }

            /// <summary>
            /// Throws the specified exception when the currently configured
            /// call gets called.
            /// </summary>
            /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            /// <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            /// <returns>Configuration object.</returns>
            /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
            public IAfterCallConfiguredConfiguration<IReturnValueConfiguration<TMember>> Throws<T1, T2, T3, T4>(Func<T1, T2, T3, T4, Exception> exceptionFactory)
            {
                Guard.AgainstNull(exceptionFactory);

                return this.Throws((IFakeObjectCall call) =>
                {
                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                    return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!, call.GetArgument<T4>(3)!);
                });
            }

            /// <summary>
            /// Throws the specified exception when the currently configured
            /// call gets called.
            /// </summary>
            /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            /// <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            /// <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            /// <returns>Configuration object.</returns>
            /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
            public IAfterCallConfiguredConfiguration<IReturnValueConfiguration<TMember>> Throws<T1, T2, T3, T4, T5>(Func<T1, T2, T3, T4, T5, Exception> exceptionFactory)
            {
                Guard.AgainstNull(exceptionFactory);

                return this.Throws((IFakeObjectCall call) =>
                {
                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                    return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!, call.GetArgument<T4>(3)!, call.GetArgument<T5>(4)!);
                });
            }

            /// <summary>
            /// Throws the specified exception when the currently configured
            /// call gets called.
            /// </summary>
            /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            /// <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            /// <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            /// <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            /// <returns>Configuration object.</returns>
            /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
            public IAfterCallConfiguredConfiguration<IReturnValueConfiguration<TMember>> Throws<T1, T2, T3, T4, T5, T6>(Func<T1, T2, T3, T4, T5, T6, Exception> exceptionFactory)
            {
                Guard.AgainstNull(exceptionFactory);

                return this.Throws((IFakeObjectCall call) =>
                {
                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                    return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!, call.GetArgument<T4>(3)!, call.GetArgument<T5>(4)!, call.GetArgument<T6>(5)!);
                });
            }

            /// <summary>
            /// Throws the specified exception when the currently configured
            /// call gets called.
            /// </summary>
            /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            /// <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            /// <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            /// <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            /// <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            /// <returns>Configuration object.</returns>
            /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
            public IAfterCallConfiguredConfiguration<IReturnValueConfiguration<TMember>> Throws<T1, T2, T3, T4, T5, T6, T7>(Func<T1, T2, T3, T4, T5, T6, T7, Exception> exceptionFactory)
            {
                Guard.AgainstNull(exceptionFactory);

                return this.Throws((IFakeObjectCall call) =>
                {
                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                    return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!, call.GetArgument<T4>(3)!, call.GetArgument<T5>(4)!, call.GetArgument<T6>(5)!, call.GetArgument<T7>(6)!);
                });
            }

            /// <summary>
            /// Throws the specified exception when the currently configured
            /// call gets called.
            /// </summary>
            /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            /// <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            /// <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            /// <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            /// <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            /// <typeparam name="T8">The type of the eighth argument of the faked method call.</typeparam>
            /// <returns>Configuration object.</returns>
            /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
            public IAfterCallConfiguredConfiguration<IReturnValueConfiguration<TMember>> Throws<T1, T2, T3, T4, T5, T6, T7, T8>(Func<T1, T2, T3, T4, T5, T6, T7, T8, Exception> exceptionFactory)
            {
                Guard.AgainstNull(exceptionFactory);

                return this.Throws((IFakeObjectCall call) =>
                {
                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                    return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!, call.GetArgument<T4>(3)!, call.GetArgument<T5>(4)!, call.GetArgument<T6>(5)!, call.GetArgument<T7>(6)!, call.GetArgument<T8>(7)!);
                });
            }
        }
    }

    internal partial class AnyCallConfiguration
    {
        /// <summary>
        /// Throws the specified exception when the currently configured
        /// call gets called.
        /// </summary>
        /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
        /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
        /// <returns>Configuration object.</returns>
        /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        public IAfterCallConfiguredConfiguration<IVoidConfiguration> Throws<T1>(Func<T1, Exception> exceptionFactory)
        {
            Guard.AgainstNull(exceptionFactory);

            return this.Throws((IFakeObjectCall call) =>
            {
                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                return exceptionFactory(call.GetArgument<T1>(0)!);
            });
        }

        /// <summary>
        /// Throws the specified exception when the currently configured
        /// call gets called.
        /// </summary>
        /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
        /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
        /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
        /// <returns>Configuration object.</returns>
        /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        public IAfterCallConfiguredConfiguration<IVoidConfiguration> Throws<T1, T2>(Func<T1, T2, Exception> exceptionFactory)
        {
            Guard.AgainstNull(exceptionFactory);

            return this.Throws((IFakeObjectCall call) =>
            {
                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!);
            });
        }

        /// <summary>
        /// Throws the specified exception when the currently configured
        /// call gets called.
        /// </summary>
        /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
        /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
        /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
        /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
        /// <returns>Configuration object.</returns>
        /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        public IAfterCallConfiguredConfiguration<IVoidConfiguration> Throws<T1, T2, T3>(Func<T1, T2, T3, Exception> exceptionFactory)
        {
            Guard.AgainstNull(exceptionFactory);

            return this.Throws((IFakeObjectCall call) =>
            {
                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!);
            });
        }

        /// <summary>
        /// Throws the specified exception when the currently configured
        /// call gets called.
        /// </summary>
        /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
        /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
        /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
        /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
        /// <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
        /// <returns>Configuration object.</returns>
        /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        public IAfterCallConfiguredConfiguration<IVoidConfiguration> Throws<T1, T2, T3, T4>(Func<T1, T2, T3, T4, Exception> exceptionFactory)
        {
            Guard.AgainstNull(exceptionFactory);

            return this.Throws((IFakeObjectCall call) =>
            {
                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!, call.GetArgument<T4>(3)!);
            });
        }

        /// <summary>
        /// Throws the specified exception when the currently configured
        /// call gets called.
        /// </summary>
        /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
        /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
        /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
        /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
        /// <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
        /// <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
        /// <returns>Configuration object.</returns>
        /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        public IAfterCallConfiguredConfiguration<IVoidConfiguration> Throws<T1, T2, T3, T4, T5>(Func<T1, T2, T3, T4, T5, Exception> exceptionFactory)
        {
            Guard.AgainstNull(exceptionFactory);

            return this.Throws((IFakeObjectCall call) =>
            {
                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!, call.GetArgument<T4>(3)!, call.GetArgument<T5>(4)!);
            });
        }

        /// <summary>
        /// Throws the specified exception when the currently configured
        /// call gets called.
        /// </summary>
        /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
        /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
        /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
        /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
        /// <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
        /// <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
        /// <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
        /// <returns>Configuration object.</returns>
        /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        public IAfterCallConfiguredConfiguration<IVoidConfiguration> Throws<T1, T2, T3, T4, T5, T6>(Func<T1, T2, T3, T4, T5, T6, Exception> exceptionFactory)
        {
            Guard.AgainstNull(exceptionFactory);

            return this.Throws((IFakeObjectCall call) =>
            {
                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!, call.GetArgument<T4>(3)!, call.GetArgument<T5>(4)!, call.GetArgument<T6>(5)!);
            });
        }

        /// <summary>
        /// Throws the specified exception when the currently configured
        /// call gets called.
        /// </summary>
        /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
        /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
        /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
        /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
        /// <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
        /// <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
        /// <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
        /// <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
        /// <returns>Configuration object.</returns>
        /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        public IAfterCallConfiguredConfiguration<IVoidConfiguration> Throws<T1, T2, T3, T4, T5, T6, T7>(Func<T1, T2, T3, T4, T5, T6, T7, Exception> exceptionFactory)
        {
            Guard.AgainstNull(exceptionFactory);

            return this.Throws((IFakeObjectCall call) =>
            {
                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!, call.GetArgument<T4>(3)!, call.GetArgument<T5>(4)!, call.GetArgument<T6>(5)!, call.GetArgument<T7>(6)!);
            });
        }

        /// <summary>
        /// Throws the specified exception when the currently configured
        /// call gets called.
        /// </summary>
        /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
        /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
        /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
        /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
        /// <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
        /// <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
        /// <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
        /// <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
        /// <typeparam name="T8">The type of the eighth argument of the faked method call.</typeparam>
        /// <returns>Configuration object.</returns>
        /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        public IAfterCallConfiguredConfiguration<IVoidConfiguration> Throws<T1, T2, T3, T4, T5, T6, T7, T8>(Func<T1, T2, T3, T4, T5, T6, T7, T8, Exception> exceptionFactory)
        {
            Guard.AgainstNull(exceptionFactory);

            return this.Throws((IFakeObjectCall call) =>
            {
                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!, call.GetArgument<T4>(3)!, call.GetArgument<T5>(4)!, call.GetArgument<T6>(5)!, call.GetArgument<T7>(6)!, call.GetArgument<T8>(7)!);
            });
        }
    }

    internal partial class PropertySetterConfiguration<TValue>
    {
        /// <summary>
        /// Throws the specified exception when the currently configured
        /// call gets called.
        /// </summary>
        /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
        /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
        /// <returns>Configuration object.</returns>
        /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        public IAfterCallConfiguredConfiguration<IPropertySetterConfiguration> Throws<T1>(Func<T1, Exception> exceptionFactory)
        {
            Guard.AgainstNull(exceptionFactory);

            return this.Throws((IFakeObjectCall call) =>
            {
                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                return exceptionFactory(call.GetArgument<T1>(0)!);
            });
        }

        /// <summary>
        /// Throws the specified exception when the currently configured
        /// call gets called.
        /// </summary>
        /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
        /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
        /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
        /// <returns>Configuration object.</returns>
        /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        public IAfterCallConfiguredConfiguration<IPropertySetterConfiguration> Throws<T1, T2>(Func<T1, T2, Exception> exceptionFactory)
        {
            Guard.AgainstNull(exceptionFactory);

            return this.Throws((IFakeObjectCall call) =>
            {
                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!);
            });
        }

        /// <summary>
        /// Throws the specified exception when the currently configured
        /// call gets called.
        /// </summary>
        /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
        /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
        /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
        /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
        /// <returns>Configuration object.</returns>
        /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        public IAfterCallConfiguredConfiguration<IPropertySetterConfiguration> Throws<T1, T2, T3>(Func<T1, T2, T3, Exception> exceptionFactory)
        {
            Guard.AgainstNull(exceptionFactory);

            return this.Throws((IFakeObjectCall call) =>
            {
                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!);
            });
        }

        /// <summary>
        /// Throws the specified exception when the currently configured
        /// call gets called.
        /// </summary>
        /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
        /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
        /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
        /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
        /// <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
        /// <returns>Configuration object.</returns>
        /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        public IAfterCallConfiguredConfiguration<IPropertySetterConfiguration> Throws<T1, T2, T3, T4>(Func<T1, T2, T3, T4, Exception> exceptionFactory)
        {
            Guard.AgainstNull(exceptionFactory);

            return this.Throws((IFakeObjectCall call) =>
            {
                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!, call.GetArgument<T4>(3)!);
            });
        }

        /// <summary>
        /// Throws the specified exception when the currently configured
        /// call gets called.
        /// </summary>
        /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
        /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
        /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
        /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
        /// <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
        /// <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
        /// <returns>Configuration object.</returns>
        /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        public IAfterCallConfiguredConfiguration<IPropertySetterConfiguration> Throws<T1, T2, T3, T4, T5>(Func<T1, T2, T3, T4, T5, Exception> exceptionFactory)
        {
            Guard.AgainstNull(exceptionFactory);

            return this.Throws((IFakeObjectCall call) =>
            {
                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!, call.GetArgument<T4>(3)!, call.GetArgument<T5>(4)!);
            });
        }

        /// <summary>
        /// Throws the specified exception when the currently configured
        /// call gets called.
        /// </summary>
        /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
        /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
        /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
        /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
        /// <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
        /// <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
        /// <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
        /// <returns>Configuration object.</returns>
        /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        public IAfterCallConfiguredConfiguration<IPropertySetterConfiguration> Throws<T1, T2, T3, T4, T5, T6>(Func<T1, T2, T3, T4, T5, T6, Exception> exceptionFactory)
        {
            Guard.AgainstNull(exceptionFactory);

            return this.Throws((IFakeObjectCall call) =>
            {
                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!, call.GetArgument<T4>(3)!, call.GetArgument<T5>(4)!, call.GetArgument<T6>(5)!);
            });
        }

        /// <summary>
        /// Throws the specified exception when the currently configured
        /// call gets called.
        /// </summary>
        /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
        /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
        /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
        /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
        /// <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
        /// <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
        /// <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
        /// <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
        /// <returns>Configuration object.</returns>
        /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        public IAfterCallConfiguredConfiguration<IPropertySetterConfiguration> Throws<T1, T2, T3, T4, T5, T6, T7>(Func<T1, T2, T3, T4, T5, T6, T7, Exception> exceptionFactory)
        {
            Guard.AgainstNull(exceptionFactory);

            return this.Throws((IFakeObjectCall call) =>
            {
                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!, call.GetArgument<T4>(3)!, call.GetArgument<T5>(4)!, call.GetArgument<T6>(5)!, call.GetArgument<T7>(6)!);
            });
        }

        /// <summary>
        /// Throws the specified exception when the currently configured
        /// call gets called.
        /// </summary>
        /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
        /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
        /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
        /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
        /// <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
        /// <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
        /// <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
        /// <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
        /// <typeparam name="T8">The type of the eighth argument of the faked method call.</typeparam>
        /// <returns>Configuration object.</returns>
        /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        public IAfterCallConfiguredConfiguration<IPropertySetterConfiguration> Throws<T1, T2, T3, T4, T5, T6, T7, T8>(Func<T1, T2, T3, T4, T5, T6, T7, T8, Exception> exceptionFactory)
        {
            Guard.AgainstNull(exceptionFactory);

            return this.Throws((IFakeObjectCall call) =>
            {
                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!, call.GetArgument<T4>(3)!, call.GetArgument<T5>(4)!, call.GetArgument<T6>(5)!, call.GetArgument<T7>(6)!, call.GetArgument<T8>(7)!);
            });
        }

        private partial class PropertySetterAdapter
        {
            /// <summary>
            /// Throws the specified exception when the currently configured
            /// call gets called.
            /// </summary>
            /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            /// <returns>Configuration object.</returns>
            /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
            public IAfterCallConfiguredConfiguration<IPropertySetterConfiguration> Throws<T1>(Func<T1, Exception> exceptionFactory)
            {
                Guard.AgainstNull(exceptionFactory);

                return this.Throws((IFakeObjectCall call) =>
                {
                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                    return exceptionFactory(call.GetArgument<T1>(0)!);
                });
            }

            /// <summary>
            /// Throws the specified exception when the currently configured
            /// call gets called.
            /// </summary>
            /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            /// <returns>Configuration object.</returns>
            /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
            public IAfterCallConfiguredConfiguration<IPropertySetterConfiguration> Throws<T1, T2>(Func<T1, T2, Exception> exceptionFactory)
            {
                Guard.AgainstNull(exceptionFactory);

                return this.Throws((IFakeObjectCall call) =>
                {
                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                    return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!);
                });
            }

            /// <summary>
            /// Throws the specified exception when the currently configured
            /// call gets called.
            /// </summary>
            /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            /// <returns>Configuration object.</returns>
            /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
            public IAfterCallConfiguredConfiguration<IPropertySetterConfiguration> Throws<T1, T2, T3>(Func<T1, T2, T3, Exception> exceptionFactory)
            {
                Guard.AgainstNull(exceptionFactory);

                return this.Throws((IFakeObjectCall call) =>
                {
                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                    return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!);
                });
            }

            /// <summary>
            /// Throws the specified exception when the currently configured
            /// call gets called.
            /// </summary>
            /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            /// <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            /// <returns>Configuration object.</returns>
            /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
            public IAfterCallConfiguredConfiguration<IPropertySetterConfiguration> Throws<T1, T2, T3, T4>(Func<T1, T2, T3, T4, Exception> exceptionFactory)
            {
                Guard.AgainstNull(exceptionFactory);

                return this.Throws((IFakeObjectCall call) =>
                {
                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                    return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!, call.GetArgument<T4>(3)!);
                });
            }

            /// <summary>
            /// Throws the specified exception when the currently configured
            /// call gets called.
            /// </summary>
            /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            /// <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            /// <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            /// <returns>Configuration object.</returns>
            /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
            public IAfterCallConfiguredConfiguration<IPropertySetterConfiguration> Throws<T1, T2, T3, T4, T5>(Func<T1, T2, T3, T4, T5, Exception> exceptionFactory)
            {
                Guard.AgainstNull(exceptionFactory);

                return this.Throws((IFakeObjectCall call) =>
                {
                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                    return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!, call.GetArgument<T4>(3)!, call.GetArgument<T5>(4)!);
                });
            }

            /// <summary>
            /// Throws the specified exception when the currently configured
            /// call gets called.
            /// </summary>
            /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            /// <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            /// <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            /// <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            /// <returns>Configuration object.</returns>
            /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
            public IAfterCallConfiguredConfiguration<IPropertySetterConfiguration> Throws<T1, T2, T3, T4, T5, T6>(Func<T1, T2, T3, T4, T5, T6, Exception> exceptionFactory)
            {
                Guard.AgainstNull(exceptionFactory);

                return this.Throws((IFakeObjectCall call) =>
                {
                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                    return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!, call.GetArgument<T4>(3)!, call.GetArgument<T5>(4)!, call.GetArgument<T6>(5)!);
                });
            }

            /// <summary>
            /// Throws the specified exception when the currently configured
            /// call gets called.
            /// </summary>
            /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            /// <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            /// <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            /// <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            /// <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            /// <returns>Configuration object.</returns>
            /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
            public IAfterCallConfiguredConfiguration<IPropertySetterConfiguration> Throws<T1, T2, T3, T4, T5, T6, T7>(Func<T1, T2, T3, T4, T5, T6, T7, Exception> exceptionFactory)
            {
                Guard.AgainstNull(exceptionFactory);

                return this.Throws((IFakeObjectCall call) =>
                {
                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                    return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!, call.GetArgument<T4>(3)!, call.GetArgument<T5>(4)!, call.GetArgument<T6>(5)!, call.GetArgument<T7>(6)!);
                });
            }

            /// <summary>
            /// Throws the specified exception when the currently configured
            /// call gets called.
            /// </summary>
            /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            /// <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            /// <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            /// <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            /// <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            /// <typeparam name="T8">The type of the eighth argument of the faked method call.</typeparam>
            /// <returns>Configuration object.</returns>
            /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
            public IAfterCallConfiguredConfiguration<IPropertySetterConfiguration> Throws<T1, T2, T3, T4, T5, T6, T7, T8>(Func<T1, T2, T3, T4, T5, T6, T7, T8, Exception> exceptionFactory)
            {
                Guard.AgainstNull(exceptionFactory);

                return this.Throws((IFakeObjectCall call) =>
                {
                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                    return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!, call.GetArgument<T4>(3)!, call.GetArgument<T5>(4)!, call.GetArgument<T6>(5)!, call.GetArgument<T7>(6)!, call.GetArgument<T8>(7)!);
                });
            }
        }

        private partial class PropertySetterAfterCallbackConfiguredAdapter
        {
            /// <summary>
            /// Throws the specified exception when the currently configured
            /// call gets called.
            /// </summary>
            /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            /// <returns>Configuration object.</returns>
            /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
            public IAfterCallConfiguredConfiguration<IPropertySetterConfiguration> Throws<T1>(Func<T1, Exception> exceptionFactory)
            {
                Guard.AgainstNull(exceptionFactory);

                return this.Throws((IFakeObjectCall call) =>
                {
                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                    return exceptionFactory(call.GetArgument<T1>(0)!);
                });
            }

            /// <summary>
            /// Throws the specified exception when the currently configured
            /// call gets called.
            /// </summary>
            /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            /// <returns>Configuration object.</returns>
            /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
            public IAfterCallConfiguredConfiguration<IPropertySetterConfiguration> Throws<T1, T2>(Func<T1, T2, Exception> exceptionFactory)
            {
                Guard.AgainstNull(exceptionFactory);

                return this.Throws((IFakeObjectCall call) =>
                {
                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                    return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!);
                });
            }

            /// <summary>
            /// Throws the specified exception when the currently configured
            /// call gets called.
            /// </summary>
            /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            /// <returns>Configuration object.</returns>
            /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
            public IAfterCallConfiguredConfiguration<IPropertySetterConfiguration> Throws<T1, T2, T3>(Func<T1, T2, T3, Exception> exceptionFactory)
            {
                Guard.AgainstNull(exceptionFactory);

                return this.Throws((IFakeObjectCall call) =>
                {
                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                    return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!);
                });
            }

            /// <summary>
            /// Throws the specified exception when the currently configured
            /// call gets called.
            /// </summary>
            /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            /// <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            /// <returns>Configuration object.</returns>
            /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
            public IAfterCallConfiguredConfiguration<IPropertySetterConfiguration> Throws<T1, T2, T3, T4>(Func<T1, T2, T3, T4, Exception> exceptionFactory)
            {
                Guard.AgainstNull(exceptionFactory);

                return this.Throws((IFakeObjectCall call) =>
                {
                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                    return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!, call.GetArgument<T4>(3)!);
                });
            }

            /// <summary>
            /// Throws the specified exception when the currently configured
            /// call gets called.
            /// </summary>
            /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            /// <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            /// <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            /// <returns>Configuration object.</returns>
            /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
            public IAfterCallConfiguredConfiguration<IPropertySetterConfiguration> Throws<T1, T2, T3, T4, T5>(Func<T1, T2, T3, T4, T5, Exception> exceptionFactory)
            {
                Guard.AgainstNull(exceptionFactory);

                return this.Throws((IFakeObjectCall call) =>
                {
                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                    return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!, call.GetArgument<T4>(3)!, call.GetArgument<T5>(4)!);
                });
            }

            /// <summary>
            /// Throws the specified exception when the currently configured
            /// call gets called.
            /// </summary>
            /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            /// <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            /// <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            /// <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            /// <returns>Configuration object.</returns>
            /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
            public IAfterCallConfiguredConfiguration<IPropertySetterConfiguration> Throws<T1, T2, T3, T4, T5, T6>(Func<T1, T2, T3, T4, T5, T6, Exception> exceptionFactory)
            {
                Guard.AgainstNull(exceptionFactory);

                return this.Throws((IFakeObjectCall call) =>
                {
                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                    return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!, call.GetArgument<T4>(3)!, call.GetArgument<T5>(4)!, call.GetArgument<T6>(5)!);
                });
            }

            /// <summary>
            /// Throws the specified exception when the currently configured
            /// call gets called.
            /// </summary>
            /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            /// <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            /// <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            /// <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            /// <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            /// <returns>Configuration object.</returns>
            /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
            public IAfterCallConfiguredConfiguration<IPropertySetterConfiguration> Throws<T1, T2, T3, T4, T5, T6, T7>(Func<T1, T2, T3, T4, T5, T6, T7, Exception> exceptionFactory)
            {
                Guard.AgainstNull(exceptionFactory);

                return this.Throws((IFakeObjectCall call) =>
                {
                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                    return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!, call.GetArgument<T4>(3)!, call.GetArgument<T5>(4)!, call.GetArgument<T6>(5)!, call.GetArgument<T7>(6)!);
                });
            }

            /// <summary>
            /// Throws the specified exception when the currently configured
            /// call gets called.
            /// </summary>
            /// <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            /// <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            /// <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            /// <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            /// <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            /// <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            /// <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            /// <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            /// <typeparam name="T8">The type of the eighth argument of the faked method call.</typeparam>
            /// <returns>Configuration object.</returns>
            /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
            public IAfterCallConfiguredConfiguration<IPropertySetterConfiguration> Throws<T1, T2, T3, T4, T5, T6, T7, T8>(Func<T1, T2, T3, T4, T5, T6, T7, T8, Exception> exceptionFactory)
            {
                Guard.AgainstNull(exceptionFactory);

                return this.Throws((IFakeObjectCall call) =>
                {
                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, exceptionFactory.GetMethodInfo(), "throws");

                    return exceptionFactory(call.GetArgument<T1>(0)!, call.GetArgument<T2>(1)!, call.GetArgument<T3>(2)!, call.GetArgument<T4>(3)!, call.GetArgument<T5>(4)!, call.GetArgument<T6>(5)!, call.GetArgument<T7>(6)!, call.GetArgument<T8>(7)!);
                });
            }
        }
    }
}
